# Template for secret values
# DO NOT commit actual values to version control!
# Use this template to understand what secrets need to be configured

secrets:
  # Flask application secret key for session encryption
  # Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
  SECRET_KEY: "your-super-secure-secret-key-here"
  
  # Google OAuth 2.0 Client ID from Google Cloud Console
  # Get from: https://console.cloud.google.com/apis/credentials
  GOOGLE_CLIENT_ID: "your-google-client-id.apps.googleusercontent.com"
  
  # Comma-separated list of admin email addresses
  # These users will have admin privileges in the application
  ADMIN_EMAILS: "kedargit@gmail.com,bhargavi.ru@gmail.com"

# Optional: Database encryption key for SQLite encryption
# Only needed if you want to encrypt the SQLite database file
database:
  ENCRYPTION_KEY: "your-database-encryption-key"

# Environment-specific settings
environments:
  development:
    DEBUG: "True"
    DATABASE_URL: "sqlite:///reading_tracker_dev.db"
  
  production:
    DEBUG: "False"
    DATABASE_URL: "sqlite:///data/reading_tracker.db"
    FLASK_ENV: "production"

# Security settings for production
security:
  SESSION_COOKIE_SECURE: "True"
  SESSION_COOKIE_HTTPONLY: "True"
  SESSION_COOKIE_SAMESITE: "Lax"
  PERMANENT_SESSION_LIFETIME: "3600"  # 1 hour in seconds

# Application-specific settings
app:
  MAX_CONTENT_LENGTH: "16777216"  # 16MB max file upload
  SQLALCHEMY_TRACK_MODIFICATIONS: "False"
  SQLALCHEMY_ENGINE_OPTIONS:
    pool_pre_ping: True
    pool_recycle: 300

# Instructions for setup:
# 1. Copy this template to a secure location (NOT in version control)
# 2. Fill in actual values
# 3. Use the setup-secrets.sh script to create secrets in Google Secret Manager
# 4. Or set environment variables manually:
#    export SECRET_KEY="your-actual-secret-key"
#    export GOOGLE_CLIENT_ID="your-actual-client-id"
#    export ADMIN_EMAILS="your-admin-emails"
#    cd Pipeline/secrets && ./setup-secrets.sh
